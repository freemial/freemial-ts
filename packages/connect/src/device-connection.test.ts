import assert from 'assert';
import { describe, it } from 'node:test';

import { handleIncomingData, getSerialNumberBytes, wrapBytes, getSSIDListBytes, loadSSIDBytes, Crypter } from './device-connection';

const loadSsidReferenceBytesDecrypted = new Int8Array(
[
67, 
84, 
5, 
-92, 
0, 
6, 
98, 
111, 
105, 
105, 
105, 
105, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
4, 
13, 
116, 
104, 
101, 
44, 
80, 
97, 
115, 
115, 
119, 
111, 
114, 
100, 
33, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
20, 
104, 
116, 
116, 
112, 
58, 
47, 
47, 
49, 
48, 
46, 
48, 
46, 
48, 
46, 
49, 
58, 
51, 
48, 
48, 
48, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
0, 
27, 
19, 
61, 
36,
])

const loadSsidReferenceBytes = new Int8Array(
[124, 
-21, 
-85, 
94, 
-66, 
90, 
121, 
32, 
9, 
97, 
-44, 
56, 
83, 
122, 
119, 
36, 
83, 
-2, 
-9, 
87, 
122, 
-69, 
59, 
98, 
118, 
-21, 
-27, 
-91, 
111, 
125, 
50, 
-74, 
7, 
-92, 
35, 
57, 
-45, 
99, 
83, 
-40, 
72, 
-68, 
2, 
-109, 
-124, 
112, 
41, 
68, 
-54, 
2, 
-5, 
78, 
-64, 
87, 
-19, 
-37, 
38, 
65, 
101, 
-57, 
-4, 
-69, 
-13, 
62, 
106, 
99, 
37, 
-53, 
-29, 
1, 
101, 
-72, 
95, 
-29, 
-92, 
31, 
-47, 
79, 
46, 
-51, 
-29, 
-96, 
49, 
-18, 
-92, 
-27, 
45, 
-90, 
48, 
-82, 
-84, 
31, 
8, 
-75, 
-89, 
-5, 
14, 
114, 
-23, 
-5, 
2, 
-8, 
-102, 
-120, 
66, 
-126, 
-93, 
-101, 
42, 
80, 
65, 
-58, 
37, 
-120, 
-113, 
-67, 
33, 
-83, 
43, 
-112, 
104, 
-35, 
-29, 
-70, 
55, 
-103, 
62, 
22, 
79, 
120, 
-95, 
26, 
61, 
-30, 
-83, 
-30, 
1, 
-46, 
4, 
-36, 
-124, 
41, 
-98, 
125, 
19, 
46, 
-2, 
5, 
-120, 
-47, 
62, 
-22, 
-14, 
79, 
-31, 
46, 
35, 
124, 
116, 
-10, 
-10, 
9, 
-58, 
-28, 
-24, 
2, 
123, 
37, 
3, 
106, 
-87, 
117, 
-15,])

describe('handleIncomingData', () => {
  it('should handle a serial number incoming data', () => {
    const data = Buffer.from([0x56, 0xd8 , 0x14 , 0xfb , 0x76 , 0xa0 , 0x9c , 0x0e , 0xd7 , 0xfd , 0x00 , 0xd6 , 0xce , 0x28 , 0x88 , 0xc1 , 0xfe])
    const qrValue = 'DYPUBXP24JK5PGMGJL3U4LYVXJ7KJN4E'
    const crypter = new Crypter(qrValue);
    const { serialNumber } = handleIncomingData(data, crypter);
    assert.strictEqual(serialNumber, '20455013175100219');
  });

  it('should handle an SSID list incoming data', () => {
    const data = Buffer.from(JSON.parse('{"type":"Buffer","data":[141,210,100,168,73,69,206,1,6,103,186,161,79,172,103,134,25,128,17,120,223,194,7,173,135,107,179,99,89,91,157,66,12,235,223,242,175,207,144,68,227,129,229,205,21,112,246,113,154,112,102,192,26,142,167,116,134,239,201,199,47,190,80,129,42,40,80,52,162,98,99,3,234,153,168,169,244,195,132,217,176,242,86,129,195,232,210,221,39,87,241,41,218,99,152,2,193,64,136,42,252,39,37,239,36,139,169,7,64,109,6,7,214,161,8,192,213,237]}'))
    const qrValue = 'BJBHJM3TP2EUIBS5WPN452YF3WQQCXH4';
    const crypter = new Crypter(qrValue);
    
    const { ssidList } = handleIncomingData(data, crypter);
    assert.deepEqual(ssidList, [
      {
        securityType: 4,
        signalStrength: 60,
        ssid: 'SKYC078F'
      },
      {
        securityType: 4,
        signalStrength: 100,
        ssid: 'ðŸ¥ºðŸ‘‰ðŸ‘ˆ'
      },
      {
        securityType: 4,
        signalStrength: 98,
        ssid: 'boooooiii'
      }
    ]);
  });
})

describe('encryptMessage', () => {
  it('should encrypt the message correctly getSerialNumberBytes', async () => {
    const qrValue = 'JYRS7TC7B52UXUC4XBCK2MJPWM7VJUBO';
    const message = getSerialNumberBytes();
    const crypter = new Crypter(qrValue);
    const encryptedMessage = crypter.encrypt(wrapBytes(message));
    assert.deepEqual(Int8Array.from(encryptedMessage), new Int8Array([124, -21, -81, -6, -66, -120, -19, -87, 24,]))
  })

  it('should encrypt the message correctly getSSIDListBytes', async () => {
    const qrValue = 'JYRS7TC7B52UXUC4XBCK2MJPWM7VJUBO';
    const message = getSSIDListBytes();
    const crypter = new Crypter(qrValue);
    const encryptedMessage = crypter.encrypt(wrapBytes(message));
    assert.deepEqual(Int8Array.from(encryptedMessage), new Int8Array([124,
    -21,
    -83,
    -6,
    -66,
    -86,
    61,
    7,
    -122,]))
  })

  it('should encrypt the message correctly loadSSIDBytes', async () => {
    const qrValue = 'JYRS7TC7B52UXUC4XBCK2MJPWM7VJUBO';
    const message = wrapBytes(loadSSIDBytes("boiiii", 4, "the,Password!", "http://10.0.0.1:3000"))

    assert.deepEqual([...Int8Array.from(message)], [...loadSsidReferenceBytesDecrypted])

    const crypter = new Crypter(qrValue);
    const encryptedMessage = crypter.encrypt(message);
    assert.deepEqual(Int8Array.from(encryptedMessage).toString(), loadSsidReferenceBytes.toString())
  })
})
